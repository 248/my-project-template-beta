name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: 22
  PNPM_VERSION: 9.0.0

jobs:
  # OpenAPI契約チェック
  openapi-lint:
    name: OpenAPI Lint & Breaking Changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: OpenAPI Lint
        run: pnpm run openapi:lint

      - name: Check for Breaking Changes (PR only)
        if: github.event_name == 'pull_request'
        run: |
          # 基準ブランチとの差分でBreaking Changeをチェック
          git fetch origin ${{ github.base_ref }}
          redocly diff origin/${{ github.base_ref }}:openapi/openapi.yaml openapi/openapi.yaml --format=text

  # 生成物同期チェック
  generate-check:
    name: Generated Files Sync Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate types and client
        run: pnpm run generate

      - name: Check for uncommitted changes
        run: |
          if ! git diff --exit-code packages/generated/; then
            echo "❌ Generated files are out of sync with OpenAPI spec"
            echo "Please run 'pnpm generate' and commit the changes"
            git diff packages/generated/
            exit 1
          else
            echo "✅ Generated files are in sync"
          fi

  # コード品質チェック
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate (required for lint)
        run: pnpm run generate

      - name: ESLint
        run: pnpm run lint

      - name: Prettier format check
        run: pnpm run format:check

      - name: TypeScript type check
        run: pnpm run type-check

      - name: Dependency direction check
        run: pnpm run check-deps

  # ビルドとテスト（マトリクス）
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend-mode: [monolith, service]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate types and client
        run: pnpm run generate

      - name: Build packages
        run: pnpm run build:packages

      - name: Build web app
        env:
          BACKEND_MODE: ${{ matrix.backend-mode }}
        run: pnpm run build:web

      - name: Run tests
        env:
          BACKEND_MODE: ${{ matrix.backend-mode }}
        run: pnpm run test

      - name: Run E2E tests
        env:
          BACKEND_MODE: ${{ matrix.backend-mode }}
        run: pnpm run test:e2e

  # セキュリティチェック
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: |
          # 高リスクの脆弱性をチェック
          if pnpm audit --audit-level high --json | grep -q '"vulnerabilities"'; then
            echo "❌ High-risk vulnerabilities found"
            pnpm audit --audit-level high
            exit 1
          else
            echo "✅ No high-risk vulnerabilities found"
          fi
