/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Template Beta Cloudflare Supabase API
 * Next.js + OpenNext + Cloudflare Workers + Supabase テンプレートのAPI仕様
 * OpenAPI spec version: 1.0.0
 */
import type {
  AuthCallback200,
  AuthCallbackParams,
  AuthLoginParams,
  AuthResponse,
  HealthResponse,
  LogoutResponse,
} from './models';
import { orvalFetch } from './orval-fetcher';

/**
 * システム全体の稼働状況とバックエンドサービスの接続状況を確認します
 * @summary システムヘルスチェック
 */
export type getHealthResponse = {
  data: HealthResponse;
  status: number;
};

export const getGetHealthUrl = () => {
  return `/api/health`;
};

export const getHealth = async (
  options?: RequestInit
): Promise<getHealthResponse> => {
  return orvalFetch<Promise<getHealthResponse>>(getGetHealthUrl(), {
    ...options,
    method: 'GET',
  });
};

/**
 * 指定されたプロバイダーでOAuth認証を開始します
 * @summary OAuth認証開始
 */
export type authLoginResponse = {
  data: AuthResponse;
  status: number;
};

export const getAuthLoginUrl = (params: AuthLoginParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, 'null');
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return `/auth/login?${normalizedParams.toString()}`;
};

export const authLogin = async (
  params: AuthLoginParams,
  options?: RequestInit
): Promise<authLoginResponse> => {
  return orvalFetch<Promise<authLoginResponse>>(getAuthLoginUrl(params), {
    ...options,
    method: 'POST',
  });
};

/**
 * OAuth認証プロバイダーからのコールバックを処理します
 * @summary OAuth認証コールバック
 */
export type authCallbackResponse = {
  data: AuthCallback200;
  status: number;
};

export const getAuthCallbackUrl = (params: AuthCallbackParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, 'null');
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return `/auth/callback?${normalizedParams.toString()}`;
};

export const authCallback = async (
  params: AuthCallbackParams,
  options?: RequestInit
): Promise<authCallbackResponse> => {
  return orvalFetch<Promise<authCallbackResponse>>(getAuthCallbackUrl(params), {
    ...options,
    method: 'GET',
  });
};

/**
 * 現在のセッションを終了します
 * @summary ログアウト
 */
export type authLogoutResponse = {
  data: LogoutResponse;
  status: number;
};

export const getAuthLogoutUrl = () => {
  return `/auth/logout`;
};

export const authLogout = async (
  options?: RequestInit
): Promise<authLogoutResponse> => {
  return orvalFetch<Promise<authLogoutResponse>>(getAuthLogoutUrl(), {
    ...options,
    method: 'POST',
  });
};
