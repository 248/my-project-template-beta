name: Deploy Preview

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: 22
  PNPM_VERSION: 9.0.0
  # 実際のCloudflare Workers サブドメインに更新してください
  PREVIEW_URL: 'https://template-beta-cloudflare-supabase-preview.your-subdomain.workers.dev'

jobs:
  deploy-preview:
    name: Deploy to Preview Environment
    runs-on: ubuntu-latest
    environment: preview

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate types and client
        run: pnpm run generate

      - name: Build application
        env:
          BACKEND_MODE: monolith
        run: pnpm run build

      - name: Deploy to Cloudflare Workers (Preview)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env preview
          workingDirectory: .
          wranglerVersion: '3'

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
              environment: 'preview'
            });

            if (deployments.length > 0) {
              const previewUrl = process.env.PREVIEW_URL;
              
              const comment = `## 🚀 Preview Deployment

              Your changes have been deployed to the preview environment:

              **Preview URL:** ${previewUrl}

              ### Environment Details
              - **Environment:** Preview
              - **Backend Mode:** Monolith
              - **Commit:** ${context.payload.pull_request.head.sha.substring(0, 7)}
              - **Branch:** ${context.payload.pull_request.head.ref}

              ### Test URLs
              - Health Check (SSR): ${previewUrl}/health
              - Health Check (API): ${previewUrl}/api/health

              ---
              *This comment will be updated on each push to the PR.*`;

              // 既存のコメントを探して更新、なければ新規作成
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number
              });

              const existingComment = comments.find(comment => 
                comment.body.includes('🚀 Preview Deployment')
              );

              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: comment
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: comment
                });
              }
            }

  # プレビュー環境でのスモークテスト
  smoke-test:
    name: Smoke Test Preview
    runs-on: ubuntu-latest
    needs: deploy-preview

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check test
        run: |
          PREVIEW_URL="${{ env.PREVIEW_URL }}"

          echo "Testing health endpoints..."

          # API health check
          API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL/api/health")
          if [ "$API_RESPONSE" != "200" ]; then
            echo "❌ API health check failed (HTTP $API_RESPONSE)"
            exit 1
          fi

          # SSR health check
          SSR_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL/health")
          if [ "$SSR_RESPONSE" != "200" ]; then
            echo "❌ SSR health check failed (HTTP $SSR_RESPONSE)"
            exit 1
          fi

          echo "✅ All smoke tests passed"

      - name: Performance check
        run: |
          PREVIEW_URL="${{ env.PREVIEW_URL }}"

          echo "Testing API performance..."

          # 簡易パフォーマンステスト（5回実行して平均を計算）
          TOTAL_TIME=0
          for i in {1..5}; do
            TIME=$(curl -s -o /dev/null -w "%{time_total}" "$PREVIEW_URL/api/health")
            TOTAL_TIME=$(echo "$TOTAL_TIME + $TIME" | bc -l)
            echo "Request $i: ${TIME}s"
          done

          AVG_TIME=$(echo "scale=3; $TOTAL_TIME / 5" | bc -l)
          echo "Average response time: ${AVG_TIME}s"

          # 300ms (0.3s) 以下かチェック
          if (( $(echo "$AVG_TIME > 0.3" | bc -l) )); then
            echo "⚠️ Average response time (${AVG_TIME}s) exceeds 300ms target"
            # 警告のみ、失敗はさせない（プレビュー環境のため）
          else
            echo "✅ Performance target met (${AVG_TIME}s < 0.3s)"
          fi
